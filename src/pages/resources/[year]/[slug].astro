---
import { getCollection, render } from 'astro:content';
import Layout from "../../../layouts/Layout.astro";
import { Schema } from 'astro-seo-schema';
import { marked } from 'marked';
import { slugifyTag } from "../../../utils/slugifyTag";

export async function getStaticPaths() {
    const documents = await getCollection('documents');
    if (!documents?.length) return { paths: [] };
    return documents.map(doc => ({
        params: { year: String(doc.data.year), slug: doc.data.slug },
    }));
}


const { year, slug } = Astro.params;

const document = (await getCollection('documents')).find(
    (doc) => doc.data.slug === slug && String(doc.data.year) === String(year)
);

if (!document) {
    return Astro.redirect('/404');
}

const {
    title,
    description,
    author,
    tags = [],
    original_language_body,
    language,
    resource_link = []
} = document.data;
const docFileName = document.id.split('/').pop().replace('.md', '');
const { Content, headings } = await render(document);
const extraHeadings = [];
if (description) extraHeadings.push({ slug: 'description', text: 'Description' });
if (Array.isArray(resource_link) && resource_link.length > 0) {
    extraHeadings.push({ slug: 'primary-source', text: 'Primary Source' });
}
const allHeadings = [...extraHeadings, ...headings];
const safeTags: string[] = tags ?? [];
---

<Layout>
    <Fragment slot="head" >
        <title>{title} | Penn Judaica</title>
        <meta name="description" content={description} />
        <Schema
                item={{
                    '@context': 'https://schema.org',
                    '@type': 'CreativeWork',
                    headline: title,
                    description,
                    author: author ? { '@type': 'Person', name: author } : undefined,
                    datePublished: year,
                    mainEntityOfPage: { '@type': 'WebPage', '@id': `/resources/${year}/${slug}` },
                    keywords: tags?.join(', '),
                }}
        />
    </Fragment>

    <section class="py-16 sm:py-20 bg-gray-50 dark:bg-gray-900 transition-colors">
        <div class="mx-auto max-w-screen-2xl px-4 lg:px-10">
            <!-- Breadcrumb + Actions row stays full-width -->
            <nav class="flex flex-wrap items-center justify-between text-sm mb-6" aria-label="Breadcrumb">
                <div class="flex items-center gap-2 mb-2 sm:mb-0 text-gray-700 dark:text-gray-300">
                    <a href="/resources" class="text-indigo-600 dark:text-indigo-400 hover:underline">Resources</a>
                    <span>/</span>
                    <a href={`/resources/${year}`} class="text-indigo-600 dark:text-indigo-400 hover:underline">{year}</a>
                    <span>/</span>
                    <span class="text-gray-500 dark:text-gray-400">{title}</span>
                </div>

                <div class="flex sm:ml-auto">
                    <a
                            href={`/downloads/${year}/${docFileName}.pdf`}
                            download
                            class="inline-flex items-center gap-2 px-4 py-2 rounded-md border border-indigo-700 text-indigo-900 dark:text-indigo-100 hover:bg-indigo-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 transition"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 0 0-2.25 2.25v9a2.25 2.25 0 0 0 2.25 2.25h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25H15M9 12l3 3m0 0 3-3m-3 3V2.25" />
                        </svg>
                        Download PDF
                    </a>
                </div>
            </nav>

            <!-- Desktop grid: readable content column + steady sidebar -->
            <div class="grid gap-10 lg:gap-16 lg:grid-cols-[minmax(0,90ch)_minmax(300px,360px)] items-start">                <!-- Main content column -->
                <div>
                    <h1 class="text-[2rem] sm:text-4xl lg:text-[2.5rem] leading-tight font-bold text-gray-900 dark:text-gray-100 mb-4"
                        set:html={marked.parseInline(title)} />

                    <!-- At-a-glance row -->
                    <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between mb-6">
                        <div class="flex flex-wrap items-center gap-3 text-sm">
                            {author && (
                                    <span class="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200">
                <svg width="16" height="16" viewBox="0 0 24 24" class="opacity-70"><path fill="currentColor" d="M12 12a5 5 0 1 0-5-5a5 5 0 0 0 5 5m0 2c-4.33 0-8 2.24-8 5v1h16v-1c0-2.76-3.67-5-8-5"/></svg>
                <span class="font-medium">Scholar:</span> {author}
              </span>
                            )}

                            <a href={`/resources/${year}`}
                               class="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition">
                                <svg width="16" height="16" viewBox="0 0 24 24" class="opacity-70"><path fill="currentColor" d="M17 3H7a2 2 0 0 0-2 2v14l7-3l7 3V5a2 2 0 0 0-2-2"/></svg>
                                <span class="font-medium">Year:</span> {year}
                            </a>

                            {safeTags.length > 0 && (
                                    <div class="w-full sm:w-auto">
                                        <div class="flex flex-wrap gap-2 mt-1">
                                            {safeTags.map((tag) => {
                                                const tagSlug = slugifyTag(tag);
                                                return (
                                                        <a href={`/tags/${tagSlug}`}
                                                           class="inline-block bg-indigo-100 dark:bg-indigo-900/40 text-indigo-800 dark:text-indigo-200 text-xs sm:text-sm px-3 py-1 rounded-full hover:bg-indigo-200 dark:hover:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition">
                                                            {tag}
                                                        </a>
                                                );
                                            })}
                                        </div>
                                    </div>
                            )}
                        </div>
                    </div>

                    <!-- Desktop description callout -->


                    <!-- Mobile accordions -->
                    {description && (
                            <section id="description" class="scroll-mt-24 mb-6">
                                <details open class="group rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-800 shadow-sm">
                                    <summary class="cursor-pointer list-none flex items-center justify-between p-4 text-gray-900 dark:text-gray-100">
                                        <span class="text-base font-semibold">Description</span>
                                        <svg class="transition-transform group-open:rotate-180" width="18" height="18" viewBox="0 0 24 24">
                                            <path fill="currentColor" d="m7 10l5 5l5-5z"/>
                                        </svg>
                                    </summary>
                                    <div class="px-4 pb-4 text-gray-700 dark:text-gray-200" set:html={marked.parse(description)} />
                                </details>
                            </section>
                    )}







                    {Array.isArray(resource_link) && resource_link.length > 0 && (
                            <section id="primary-source" class="scroll-mt-24 my-6 space-y-3">

                                {resource_link.map((link, i) => {
                                    const isString = typeof link === 'string';
                                    const obj = (!isString ? (link as { url: string; label?: string }) : null);
                                    const rawUrl = isString ? (link as string) : obj!.url;

                                    const isIframeHtml = isString && rawUrl.trim().startsWith('<iframe');

                                    // Detect raw IIIF manifest
      const looksLikeRawManifest =
                                        typeof rawUrl === 'string' &&
                                        ((/\.json($|\?)/.test(rawUrl)) || /iiif\/(presentation|manifest)/i.test(rawUrl)) &&
                                        !rawUrl.includes('uv.html') && !rawUrl.includes('mirador') && !rawUrl.includes('manifest=');

                                    // Wrap manifest in UV
      const viewerUrl = looksLikeRawManifest
                                        ? `https://uv-v4.netlify.app/uv.html#?manifest=${encodeURIComponent(rawUrl)}`
                                        : rawUrl;

                                    // Treat as IIIF
      const isIIIF = typeof viewerUrl === 'string' &&
                                        (viewerUrl.includes('manifest=') || viewerUrl.includes('uv.html') || viewerUrl.includes('mirador'));

                                    // Encode ?manifest=
      const encodedUrl = isIIIF
                                        ? viewerUrl.replace(/manifest=([^&]*)/, (_m, v) => `manifest=${encodeURIComponent(v)}`)
                                        : viewerUrl;

                                    // Label
      const siteBase = (Astro.site && new URL(Astro.site).origin) || 'https://example.com';
                                    const computedLabel = (() => {
                                        try {
                                            const parsed = new URL(rawUrl, siteBase);
                                            if (isIIIF) return 'Primary Resource';
                                            return parsed.hostname || 'View Resource';
                                        } catch {
                                            return 'View Resource';
                                        }
                                    })();

                                    const label = obj?.label ?? computedLabel;
                                    const shouldOpen = isIframeHtml || isIIIF;

                                    return (
                                            <details class="group rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-800 shadow-sm" open={shouldOpen}>
                                                <summary class="cursor-pointer list-none flex items-center justify-between p-4 text-gray-900 dark:text-gray-100">
                                                    <span class="text-sm sm:text-base font-semibold">{label}</span>
                                                    <svg class="transition-transform group-open:rotate-180" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="m7 10l5 5l5-5z"/></svg>
                                                </summary>

                                                <div class="px-4 pb-4">
                                                    {isIframeHtml ? (
                                                            <div class="rounded overflow-hidden border border-gray-200 dark:border-gray-700" set:html={rawUrl} />
                                                    ) : isIIIF ? (
                                                        shouldOpen ? (
                                                                <iframe src={encodedUrl} loading="lazy" allowfullscreen class="w-full h-[600px] rounded border border-gray-200 dark:border-gray-700"></iframe>
                                                        ) : (
                                                                <iframe data-src={encodedUrl} loading="lazy" allowfullscreen class="w-full h-[600px] rounded border border-gray-200 dark:border-gray-700"></iframe>
                                                        )
                                                    ) : (
                                                            <a href={rawUrl} target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 px-4 py-2 mt-2 rounded-md border border-indigo-700 text-indigo-900 dark:text-indigo-100 hover:bg-indigo-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 transition">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M14 3h7v7m0 0L10 21l-7-7L21 10z"/></svg>
                                                                {label}
                                                            </a>
                                                    )}
                                                </div>
                                            </details>
                                    );
                                })}
                            </section>
                    )}
                    <script is:inline>
                        const resRoot = document.getElementById('primary-source');
                        if (resRoot) {
                            resRoot.querySelectorAll('details').forEach((d) => {
                                const load = () => {
                                    const iframe = d.querySelector('iframe[data-src]:not([src])');
                                    if (iframe) {
                                        iframe.src = iframe.dataset.src;
                                        requestAnimationFrame(() => window.dispatchEvent(new Event('resize')));
                                    }
                                };
                                if (d.open) load();
                                d.addEventListener('toggle', () => { if (d.open) load(); });
                            });
                        }
                    </script>
                    <!-- Sticky Mobile ToC -->
                    {allHeadings.length > 0 && (
                            <div class="lg:hidden sticky top-0 z-[60] bg-white/90 dark:bg-gray-900/90 backdrop-blur border-b border-gray-200 dark:border-gray-800 mb-6 px-4 py-3">
                                <div class="relative inline-block">
                                    <button
                                            type="button"
                                            class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 shadow-sm px-4 py-2 rounded-md text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                            onclick="document.getElementById('tocDropdownMenu')?.classList.toggle('hidden')"
                                    >
                                        Table of Contents
                                    </button>
                                    <div
                                            id="tocDropdownMenu"
                                            class="absolute z-[70] mt-2 w-72 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black/10 dark:ring-white/10 hidden max-h-80 overflow-auto"
                                    >
                                        <ul id="toc-mobile" class="py-1 text-sm text-gray-700 dark:text-gray-200"></ul>
                                    </div>
                                </div>
                            </div>
                    )}

                    <!-- Drawer behavior -->
                    <script is:inline>
                        const dlg = document.getElementById('metaDrawer');

                        if (dlg) {
                            dlg.addEventListener('close', () => {
                                dlg.returnValue = ''; // optional, mostly used in form-mode dialogs
                                document.body.classList.remove('overflow-hidden');
                                document.documentElement.classList.remove('overflow-hidden');
                            });

                            dlg.addEventListener('cancel', (e) => {
                                e.preventDefault(); // prevent ESC from closing it unless you want it
                                dlg.close();
                            });

                            // Optional: lock scroll on open
                            dlg.addEventListener('show', () => {
                                document.body.classList.add('overflow-hidden');
                                document.documentElement.classList.add('overflow-hidden');
                            });

                            // Or alternatively, if you open via JS
                            dlg.addEventListener('open', () => {
                                document.body.classList.add('overflow-hidden');
                                document.documentElement.classList.add('overflow-hidden');
                            });
                        }
                    </script>

                    <style is:global>
                        @keyframes slideUp {
                            from { transform: translateY(16px); opacity: 0 }
                            to   { transform: translateY(0);    opacity: 1 }
                        }
                    </style>
                    <!-- Citation Export and Clipboard -->

                    <article class="prose dark:prose-invert max-w-none
                prose-img:mx-auto prose-img:max-w-full prose-img:h-auto
                prose-pre:whitespace-pre-wrap prose-pre:break-words prose-pre:overflow-x-auto
                prose-code:break-words
                prose-table:block prose-table:w-full
                prose-a:break-words">
                        <Content />
                    </article>
                    <hr class="my-2 border-gray-300 dark:border-gray-600">
                    {original_language_body && (
                            <section id="original-language-body" class="prose dark:prose-invert max-w-none mt-10
                                     prose-img:mx-auto prose-img:max-w-full prose-img:h-auto
                                     prose-pre:whitespace-pre-wrap prose-pre:break-words prose-pre:overflow-x-auto
                                     prose-code:break-words
                                     prose-table:block prose-table:w-full
                                     prose-a:break-words" mt-10">



                                <div class="px-4 pb-4 text-gray-700 dark:text-gray-200" set:html={marked.parse(original_language_body)} />
                            </section>
                    )}
                </div>

                <!-- Right-hand ToC (desktop) -->
                {allHeadings.length > 0 && (
                        <aside class="hidden lg:block sticky top-28 justify-self-end w-[320px]">
                            <nav class="space-y-2 bg-white/80 dark:bg-gray-800/70 backdrop-blur p-4 rounded shadow border border-gray-200 dark:border-gray-800">
                                <h2 class="text-base font-semibold mb-2 text-gray-900 dark:text-gray-100">On this page</h2>
                                <ul id="toc-desktop" class="space-y-1"></ul>
                            </nav>
                        </aside>
                )}

            </div>
        </div>



        <button
                id="back-to-top"
                class="fixed bottom-5 right-5 z-[80] rounded-full p-3 shadow-lg
         bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none
         focus:ring-2 focus:ring-indigo-500 transition-opacity duration-300
         opacity-0 pointer-events-none"
                aria-label="Back to top"
        >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 15l-6-6-6 6"/>
            </svg>
        </button>
    </section>

</Layout>
<script is:inline>
    document.querySelectorAll('article h1, article h2, article h3').forEach((heading) => {
        if (!heading.id) {
            heading.id = heading.textContent
                .toLowerCase()
                .trim()
                .replace(/[^a-z0-9\s-]/g, '')
                .replace(/\s+/g, '-');
        }

        const anchor = document.createElement('a');
        anchor.href = `#${heading.id}`;
        anchor.className = 'text-indigo-500 hover:underline ml-2 opacity-0 group-hover:opacity-100';
        anchor.textContent = '#';

        heading.classList.add('group', 'scroll-mt-24');
        heading.appendChild(anchor);
    });

    (() => {
        const btn = document.getElementById('back-to-top');
        if (!btn) return;

        const showAt = 300; // px
        const onScroll = () => {
            if (window.scrollY > showAt) {
                btn.classList.remove('opacity-0', 'pointer-events-none');
                btn.classList.add('opacity-100');
            } else {
                btn.classList.add('opacity-0', 'pointer-events-none');
                btn.classList.remove('opacity-100');
            }
        };

        const toTop = () => window.scrollTo({ top: 0, behavior: 'smooth' });

        window.addEventListener('scroll', onScroll, { passive: true });
        btn.addEventListener('click', toTop);
        onScroll();
    })();

// Slugify helper
const slugify = (s) =>
(s || "")
.toString()
.normalize("NFKD")
.replace(/[\u0300-\u036f]/g, "")
.toLowerCase()
.replace(/[^a-z0-9\s-]/g, "")
.trim()
.replace(/\s+/g, "-");

// 1) Ensure article headings have stable IDs (captures raw HTML <h1> too)
const headingNodes = document.querySelectorAll('article h1, article h2, article h3');
headingNodes.forEach((h) => {
    if (!h.id || !h.id.trim()) h.id = slugify(h.textContent);

    // add tiny hash anchor
    if (!h.querySelector('a[data-hash]')) {
    const a = document.createElement('a');
    a.href = `#${h.id}`;
    a.dataset.hash = 'true';
    a.className = 'text-indigo-500 hover:underline ml-2 opacity-0 group-hover:opacity-100';
    a.textContent = '#';
    h.classList.add('group', 'scroll-mt-24');
    h.appendChild(a);
    }
    });

// 2) Collect DOM headings (with their IDs and text)
const domHeadings = Array.from(headingNodes).map((h) => ({
    slug: h.id,
    text: h.textContent.replace(/#+$/,'').trim(),
    depth: Number(h.tagName.substring(1)) || 2,
    }));

// 3) Add your three “extra” sections (these exist in the body via ids)
const extras = [];
if (document.getElementById('description')) {
    extras.push({ slug: 'description', text: 'Description', depth: 2 });
    }

if (document.getElementById('primary-source')) {
    extras.push({ slug: 'primary-source', text: 'Primary Source', depth: 2 });
    }
if (document.getElementById('original-language-body')) {
        extras.push({ slug: 'original-language-body', text: 'Primary Source in Original Language', depth: 2 });
    }
// 4) Merge and (optionally) de-duplicate by slug (keep first occurrence)
    const seen = new Set();
    let merged = [...extras, ...domHeadings].filter(({ slug }) => {
        if (seen.has(slug)) return false;
        seen.add(slug);
        return true;
    });

    // Move "original-language-body" to the end
    const olb = merged.find(h => h.slug === "original-language-body");
    merged = merged.filter(h => h.slug !== "original-language-body");
    if (olb) merged.push(olb);

    const all = merged;
// 5) Render ToCs
    const renderList = (ul, items, variant) => {
        if (!ul) return;
        ul.innerHTML = "";

        items.forEach(({ slug, text }) => {
            if (slug === "original-language-body") {
                const dividerLi = document.createElement("li");
                dividerLi.innerHTML = `<hr class="my-2 border-gray-300 dark:border-gray-600">`;
                ul.appendChild(dividerLi);
            }

            const li = document.createElement("li");
            const a = document.createElement("a");
            a.href = `#${slug}`;
            a.textContent = text;
            a.className =
                variant === "mobile"
                    ? "block px-4 py-2 hover:underline"
                    : "hover:underline text-gray-800 dark:text-gray-200 hover:text-indigo-700 dark:hover:text-indigo-300";
            li.appendChild(a);
            ul.appendChild(li);
        });
    };
renderList(document.getElementById("toc-mobile"), all, "mobile");
renderList(document.getElementById("toc-desktop"), all, "desktop");
</script>