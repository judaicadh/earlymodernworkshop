---
import { getCollection, render } from 'astro:content';


import { Schema } from 'astro-seo-schema';
import Comments from '../../../components/Comments.astro';
import { Disqus } from 'astro-disqus';
import { marked } from 'marked';
import Layout from "../../../layouts/Layout.astro";
import SmartToc from "../../../components/SmartToc.astro";


export async function getStaticPaths() {
    const documents = await getCollection('documents');
    if (!documents?.length) return { paths: [] };
    return documents.map(doc => ({
        params: { year: String(doc.data.year), slug: doc.data.slug },
    }));
}

const { year, slug } = Astro.params;

const document = (await getCollection('documents')).find(
    doc => doc.data.slug === slug && String(doc.data.year) === String(year)
);

if (!document) {
    return Astro.redirect('/404');
}

const { title, description, author, tags, primarysourceinfo } = document.data;
const docFileName = document.id.split('/').pop().replace('.md', '.docx');

// âœ… Get rendered MD *and* the extracted headings for ToC
const { Content, headings } = await render(document);
---

<Layout>
    <Fragment slot="head">
        <Schema
                item={{
                    '@context': 'https://schema.org',
                    '@type': 'CreativeWork',
                    headline: title,
                    description,
                    author: author ? { '@type': 'Person', name: author } : undefined,
                    datePublished: year,
                    mainEntityOfPage: { '@type': 'WebPage', '@id': `/resources/${year}/${slug}` },
                    keywords: tags?.join(', '),
                }}
        />

        <!-- COinS -->
        <span class="Z3988"
              title={`ctx_ver=Z39.88-2004&
        rft_val_fmt=info:ofi/fmt:kev:mtx:journal&
        rft.genre=article&
        rft.title=${encodeURIComponent(title)}&
        rft.description=${encodeURIComponent(description || '')}&
        rft.date=${encodeURIComponent(String(year) || '')}&
        rft.aulast=${encodeURIComponent(author || '')}&
        rft_id=${encodeURIComponent(`/resources/${year}/${slug}`)}&
      `} />
    </Fragment>

    <!-- Optional inline ToC (keeps the right-hand ToC too). Remove if you only want the sidebar. -->
    <!--
    <aside class="sticky top-24 max-h-[80vh] overflow-auto mb-8">
      <TableOfContents />
    </aside>
    -->

    <section class="py-24 ">
        <div class="container lg:px-8 mx-auto px-4 max-w-prose leading-relaxed text-lg">
            <nav class="flex flex-wrap items-center justify-between text-sm mb-6" aria-label="Breadcrumb">
                <div class="flex items-center gap-2 mb-2 sm:mb-0">
                    <a href="/resources" class="text-indigo-600 hover:underline">Resources</a>
                    <span>/</span>
                    <a href={`/resources/${year}`} class="text-indigo-600 hover:underline">{year}</a>
                    <span>/</span>
                    <span class="text-gray-500"></span>
                </div>
                <div>
                    <!-- Mobile TOC -->


                </div>

                <!-- Desktop TOC -->


                <div class="flex sm:ml-auto">
                    <a href={`/downloads/${year}/${docFileName}.pdf`} download
                       class="outline outline-2 outline-offset-12  outline-indigo-700     rounded-md font-bold underline hover:bg-indigo-700 hover:text-white transition">
                        <button>Download PDF</button>
                    </a>
                </div>
            </nav>

            <h1 class="text-4xl font-bold mb-6 text-gray-900" set:html={marked.parseInline(title)} />

            {author && (
                    <p class="text-gray-500 mb-4"><span class="font-medium">Author:</span> {author}</p>
            )}
            {primarysourceinfo && (
                    <p class="text-gray-500 mb-4"><span class="font-medium">Primary Source information:</span> {primarysourceinfo}</p>
            )}
            {description && (
                    <p class="text-gray-500 mb-4"><span class="font-medium">Description:</span> {description}</p>
            )}

            {tags?.length > 0 && (
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold">Tags:</h3>
                        <div class="flex flex-wrap gap-2">
                            {tags.map(tag => (
                                    <span class="bg-indigo-100 text-indigo-800 text-sm px-3 py-1 rounded-full">{tag}</span>
                            ))}
                        </div>
                    </div>
            )}
            {headings.length > 0 && (
                    <div class="md:hidden sticky top-0 z-30 bg-white/90 backdrop-blur border-b border-gray-200 mb-6 px-4 py-3">
                        <div class="relative inline-block">
                            <button
                                    type="button"
                                    class="bg-white border border-gray-300 shadow-sm px-4 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring"
                                    onclick="document.getElementById('tocDropdownMenu').classList.toggle('hidden')"
                            >
                                Table of Contents
                            </button>
                            <div
                                    id="tocDropdownMenu"
                                    class="absolute z-40 mt-2 w-72 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 hidden max-h-80 overflow-auto"
                            >
                                <ul class="py-1 text-sm text-gray-700">
                                    {headings.map((heading) => (
                                            <li>
                                                <a
                                                        href={`#${heading.slug}`}
                                                        class="block px-4 py-2 hover:bg-gray-100"
                                                        onclick="document.getElementById('tocDropdownMenu').classList.add('hidden')"
                                                >
                                                    {heading.text}
                                                </a>
                                            </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                    </div>
            )}
            <article class="prose">
                <Content />
            </article>

        </div>

        <aside class="hidden xl:block fixed top-32 right-10 w-64 text-sm z-20">
            <nav class="space-y-2 bg-white/80 backdrop-blur p-4 rounded shadow">
                <h2 class="text-lg font-light mb-2">On this page</h2>
                <ul class="space-y-1">
                    {headings.map((heading) => (
                            <li>
                                <a href={`#${heading.slug}`} class="hover:underline text-gray-800">
                                    {heading.text}
                                </a>
                            </li>
                    ))}
                </ul>
            </nav>
        </aside>
    </section>

</Layout>